__author__="huziy"
__date__ ="$8 dec. 2010 10:38:26$"

import re
import os
import codecs
from datetime import datetime
import numpy as np


import application_properties
application_properties.set_current_directory()


class Station:
    def __init__(self):
        self.id = None
        self.name = None
        self.longitude = None
        self.latitude = None
        self.drainage_km2 = None

        self.dates = []
        self.values = []

    def parse_from_cehq(self, path):
        f = codecs.open(path, encoding = 'iso-8859-1')
        start_reading_data = False

        dates = []
        values = []

        self.id = re.findall(r"\d+", os.path.basename(path) )[0]
        for line in f:
            line = line.strip()
            line_lower = line.lower().encode('iso-8859-1')

            if line_lower.startswith('station:'):
                rest, self.name = line.split(':')

            if 'bassin versant:' in line_lower:
                group = re.findall(r"\d+", line)
                self.drainage_km2 = float(group[0])

            if '(nad83)' in line_lower:
                groups = re.findall(r"-\d+|\d+", line_lower.replace(' ', '').replace('(nad83)', ''))
                groups = map(float, groups)

                self.latitude = self._get_degrees(groups[0:3])
                self.longitude = self._get_degrees(groups[3:])


            if 'date' in line_lower and 'remarque' in line_lower and 'station' in line_lower:
                start_reading_data = True
                continue

            #read date - value pairs from file
            
            if start_reading_data:
                fields = line.split()
                if len(fields) < 3:
                    continue

                fields = line.split(None, 3)
                dates.append(fields[1])
                values.append(fields[2])


        self.dates = map( lambda t : datetime.strptime(t, '%Y/%m/%d'), dates)
        self.values = map( float, values )



    def info(self):
        return '%s: lon=%f; lat = %f; drainage(km**2) = %f ' % (self.id,
                                                                self.longitude, self.latitude,
                                                                self.drainage_km2)


    def _get_degrees(self, group):
        '''
        Converts group (d,m,s) -> degrees
        '''
        d, m, s = group
        koef = 1.0 / 60.0
        sign = 1.0 if d >= 0 else -1.0
        return d + sign * koef * m + sign * koef ** 2 * s



if __name__ == "__main__":
    s = Station()
    s.parse_from_cehq('data/cehq_measure_data/051004_Q.txt')

    for d, v in zip(s.dates, s.values):
        print d, '-->' ,v

    print np.max(s.values)
    print np.max(s.dates)
    print "Hello World"
